package com.twitter.finagle.exp.zookeeper.watch

private[finagle] object Watch {
  object EventType {
    val NONE = -1
    val NODE_CREATED = 1
    val NODE_DELETED = 2
    val NODE_DATA_CHANGED = 3
    val NODE_CHILDREN_CHANGED = 4

    def getEvent(code: Int): String = code match {
      case -1 => "Node"
      case 1 => "Node created"
      case 2 => "Node deleted"
      case 3 => "Node data changed"
      case 4 => "Node children changed"
    }
  }

  object Type {
    val data = 1
    val exists = 2
    val child = 3
  }

  object EventState {
    /** Unused, this state is never generated by the server */
    @Deprecated
    val UNKNOWN = -1
    /** The client is in the disconnected state - it is not connected
      * to any server in the ensemble. */
    val DISCONNECTED = 0
    /** Unused, this state is never generated by the server */
    @Deprecated
    val NO_SYNC_CONNECTED = 1
    /** The client is in the connected state - it is connected
      * to a server in the ensemble (one of the servers specified
      * in the host connection parameter during ZooKeeper client
      * creation). */
    val SYNC_CONNECTED = 3
    /**
     * Auth failed state
     */
    val AUTH_FAILED = 4
    /**
     * The client is connected to a read-only server, that is the
     * server which is not currently connected to the majority.
     * The only operations allowed after receiving this state is
     * read operations.
     * This state is generated for read-only clients only since
     * read/write clients aren't allowed to connect to r/o servers.
     */
    val CONNECTED_READ_ONLY = 5
    /**
     * SaslAuthenticated:
     * used to notify clients that they are SASL-authenticated,
     * so that they can perform Zookeeper actions with their
     * SASL-authorized permissions.
     */
    val SASL_AUTHENTICATED = 6
    /** The serving cluster has expired this session. The ZooKeeper
      * client connection (the session) is no longer valid. You must
      * create a new client connection (instantiate a new ZooKeeper
      * instance) if you with to access the ensemble. */
    val EXPIRED = -112

    def getState(code: Int): String = code match {
      case -1 => "Unknown"
      case 0 => "Disconnected"
      case 1 => "No sync connected"
      case 3 => "Sync connected"
      case 4 => "Auth Failed"
      case 5 => "Connected read only"
      case 6 => "SASL authenticated"
      case -112 => "expired"
      case _ => throw new IllegalArgumentException(
        "Match error: not supported watch state code")
    }
  }
}